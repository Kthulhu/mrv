#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Command to build the documentation"""
__docformat__ = "restructuredtext"

import os
import sys


#{ Initialization

def prepare_mrv_package():
	"""Assure we are able to import mrv. If this is not the case, 
	resort to manually including the required code to set everything up"""
	try:
		import mrv
	except ImportError:
		ospd = os.path.dirname
		mrvpath = os.path.join(ospd(ospd(os.path.realpath(os.path.abspath(__file__)))), 'bin', 'mrv')
		globals()['__name__'] = "prevent execution of main"
		globals()['__file__'] = mrvpath
		
		try:
			execfile(mrvpath, globals())
		except Exception, e:
			raise EnvironmentError("Could not execute mrv at %r with error %s" % (mrvpath, e))
		# END exception handling
		
		prepare_mrv_syspath()
	else:
		return
	# END assure mrv can be imported

def makedoc_main(args):
	"""Parse args, initialize a builder, and run it"""
	prepare_mrv_package()
	from mrv.doc.base import DocGenerator
	
	p = DocGenerator.parser()
	
	hlp = """If specified, previously generated files will be removed. Works in conjunction 
	with the other flags, which default to True, hence %prog --clean will remove all 
	generated files by default"""
	p.add_option('--clean', dest='clean', action='store_true', default=False, help=hlp)
	
	options, args = p.parse_args(args)
	clean = options.clean
	del(options.clean)
	
	dgen = DocGenerator(*args, **options.__dict__)
	if clean:
		dgen.clean()
	else:
		dgen.generate()
	# END handle mode

#} END initialization


# run the script 
if __name__ == "__main__":
	makedoc_main(sys.argv[1:])
