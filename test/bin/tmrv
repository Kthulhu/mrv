#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Prepares the nose test environment for use with mrv"""
import sys
import os
import tempfile

__docformat__ = "restructuredtext"


#{ Initialization
def import_mrv_program():
	"""Fake-import everything that is available in the mrv program. Its something
	like the #import statement in c++"""
	# we assume to be launched using a relative path 
	ospd = os.path.dirname
	# mrv/test/bin/tmrv -> mrv/bin/mrv
	mrvpath = os.path.join(ospd(ospd(ospd(os.path.realpath(os.path.abspath(__file__))))), 'bin', 'mrv')
	globals()['__name__'] = "prevent execution of main"
	# mrv assumes its being started from mrv/bin
	globals()['__file__'] = mrvpath
	
	try:
		execfile(mrvpath, globals())
	except Exception, e:
		raise EnvironmentError("Could not execute mrv at %r with error %s" % (mrvpath, e))
	# END exception handling
	
def tmrvmain(args):
	"""Launch mrv main with customized startup"""
	import_mrv_program()
	mrvmain(args, args_modifier=_parse_args)
	
#} END initialization

#{ Utilities 
def _parse_args(args, maya_version, start_maya):
	"""Parse our arguments and react accordingly. 
	args don't contain the maya version number anymore, but may contain our 
	args interleaved with nose args
	
	:return: altered arguments to be passed to mrv"""
	import mrv
	import mrv.test.cmds
	
	# run nose, no matter what
	args = list(args)
	base = ['-c', 'import mrv.test.cmds.nosestartup as ns; ns.init_nose()']
	mine = list()
	
	# HANDLE COVERAGE
	#################
	try:
		args.remove(mrv.test.cmds.tmrv_coverage_flag)
		mine.extend(['--with-coverage', '--cover-html', '--cover-package=%s' % mrv.__name__, '--cover-html-dir=%s' % mrv.test.cmds.tmrv_coverage_dir])
	except ValueError:
		pass
	# END coverage handling
	
	# HANDLE MAYA
	#############
	if start_maya:
		ospd = os.path.dirname
		env = os.environ
		import mrv.cmds.base as mrvbase
		import mrv.test.cmds as mrvtestcmds
		
		# SETUP MAYA SCRIPT PATH 
		# It must contain our override UI script
		# NOTE: at this point, we have altered our own file to become 'mrv'
		scriptpath = os.path.join(ospd(ospd(__file__)), 'test', 'cmds')
		
		# set environment
		mrvbase.update_env_path(env, 'MAYA_SCRIPT_PATH', scriptpath, append=True)
		env['MAYA_OVERRIDE_UI'] = 'initialLayout_minimal.mel'
		
		# Use all our args as nose test args
		env[mrvtestcmds.env_nose_args] = mrvtestcmds.nose_args_splitter.join(mine + args)
		
		# SETUP MAYA APP DIR
		# Create a dummy Maya.env and a separate app dir
		mappdir = os.path.join(tempfile.gettempdir(), 'maya_test_prefsdir')
		if not os.path.isdir(mappdir):
			os.mkdir(mappdir)
		open(os.path.join(mappdir, 'Maya.env'), 'w').close()
		
		env['MAYA_APP_DIR'] = mappdir
		
		# clear the args, maya may not see them
		del(mine[:])
		del(base[:])
		del(args[:])
	# END handle maya
	
	return tuple(base + mine + args)

#} END utilities
	
if __name__ == "__main__":
	# ignore first arg which is the executable
	tmrvmain(sys.argv[1:])
# END initialization
