#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""This module can run standalone, within the native project directory, or with
mrv available in the python path. It can be imported in order to provide common 
functionality"""
import sys
import os

__docformat__ = "restructuredtext"


#{ Globals
_mrv_ui_flag = '--mrv-maya'
#} END globals

#{ Initialization
def prepare_syspath():
	"""Make sure mrv is in the python path, and manipulate sys.path if required
	in order to assure that.
	
	:raise ImportError: If mrv could not be found in this interpreter"""
	try:
		import mrv
	except ImportError:
		# manipulate the import path - first we may be within the mrv structurure
		# or alternatively within /usr/bin/, that is outside of the structure.
		# In the latter case we can't do anything though
		ospd = os.path.dirname
		sys.path.append(ospd(ospd(ospd(os.path.realpath(os.path.abspath(__file__))))))
		try:
			import mrv
		except ImportError:
			del(sys.path[-1])
			raise ImportError("Failed to import MRV as it could not be found in your syspath, nor could it be deduced"); 
		# END second attempt exception handling
	# END import exception handling


def init_environment(args):
	"""Intialize MRV up to the point where we can replace this process with the 
	one we prepared
	
	:param args: commandline arguments excluding the executable ( usually first arg )
	:return: tuple(maya_version, args) tuple of maya_version, and the remaining args"""
	prepare_syspath()
	import mrv.cmds.base as mrvinit
	
	# see if first argument is the maya version
	maya_version=8.5
	if args:
		parsed_successfully, maya_version = mrvinit.parse_maya_version(args[0], maya_version)
		if parsed_successfully:
			args = args[1:]
		# END cut version arg
	# END if there are args at all
	
	mrvinit.update_maya_environment(maya_version)
	return (maya_version, tuple(args))
	
	
#} END initialization

def mrvmain(args, args_modifier=lambda a, v, m: a):
	"""Prepare the environment to allow the operation of maya
	:param args_modifier: Function returning a possibly modified argument list. The passed 
		in argument list was parsed already to find and extract the maya version. 
		Signature: ``arglist func(arglist, maya_version, start_maya)
		If start_maya is True, the process to be started will be maya, not the 
		python interpreter
	"""
	maya_version, rargs = init_environment(args)
	import mrv.cmds.base as mrvinit
	
	# figure out whether to start python or maya
	start_maya = False
	try:
		lrargs = list(rargs)
		lrargs.remove(_mrv_ui_flag)
		rargs = tuple(lrargs)
		start_maya = True
	except ValueError:
		pass
	# HANDLE maya in UI mode
	
	rargs = args_modifier(rargs, maya_version, start_maya)
	if start_maya:
		mrvinit.exec_maya_binary(rargs, maya_version)
	else:
		mrvinit.exec_python_interpreter(rargs, maya_version)
	# END handle process to start
	

if __name__ == "__main__":
	# ignore first arg which is the executable
	mrvmain(sys.argv[1:])
# END initialization
