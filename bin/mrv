#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""This module can run standalone, within the native project directory, or with
mrv available in the python path. It can be imported in order to provide common 
functionality"""
import sys
import os

__docformat__ = "restructuredtext"


#{ Globals
_mrv_ui_flag = '--mrv-maya'
_mrv_mayapy_flag = '--mrv-mayapy'
#} END globals

#{ Initialization
def prepare_mrv_syspath():
	"""Make sure mrv is in the python path, and manipulate sys.path if required
	in order to assure that.
	
	:raise ImportError: If mrv could not be found in this interpreter"""
	try:
		import mrv
	except ImportError:
		# manipulate the import path - first we may be within the mrv structurure
		# or alternatively within /usr/bin/, that is outside of the structure.
		# In the latter case we can't do anything though
		ospd = os.path.dirname
		sys.path.append(ospd(ospd(ospd(os.path.realpath(os.path.abspath(__file__))))))
		try:
			import mrv
		except ImportError:
			del(sys.path[-1])
			raise ImportError("Failed to import MRV as it could not be found in your syspath, nor could it be deduced"); 
		# END second attempt exception handling
	# END import exception handling

def mrvmain(args, args_modifier=lambda a, v, m: a):
	"""Prepare the environment to allow the operation of maya
	:param args_modifier: Function returning a possibly modified argument list. The passed 
		in argument list was parsed already to find and extract the maya version. 
		Signature: ``arglist func(arglist, maya_version, start_maya)
		If start_maya is True, the process to be started will be maya, not the 
		python interpreter
	"""
	prepare_mrv_syspath()
	import mrv.cmds.base as mrvinit
	maya_version, rargs = mrvinit.init_environment(args)
	
	# handle special arguments
	config = [False, False]
	lrargs = list(rargs)
	for i, (flag, varname) in enumerate(( (_mrv_ui_flag, 'start_maya'), 
							    		  (_mrv_mayapy_flag, 'mayapy_only'))):
		try:
			lrargs.remove(flag)
			config[i] = True
		except ValueError:
			pass
		# HANDLE maya in UI mode
	# END for each flag to handle
	start_maya, mayapy_only = config
	rargs = tuple(lrargs)
	
	rargs = args_modifier(rargs, maya_version, start_maya)
	if start_maya:
		mrvinit.exec_maya_binary(rargs, maya_version)
	else:
		mrvinit.exec_python_interpreter(rargs, maya_version, mayapy_only)
	# END handle process to start
	
#} END initialization


if __name__ == "__main__":
	# ignore first arg which is the executable
	mrvmain(sys.argv[1:])
# END initialization
